#[cfg(test)]
mod tests {
    use crate::arctorustinttensorarith::*;
    use ndarray::{Array,Dim,Ix};
    use std::rc::Rc;

    #[rewrite(main)]
    #[test]
    fn testu8() {
	let a:Rc<Array<u8, Dim<[Ix; 2]>>> =
	    Rc::new(Array::from_shape_vec((2, 2),
					  vec![5, 6, 7, 8]).unwrap());
	let b:Rc<Array<u8, Dim<[Ix; 2]>>> =
	    Rc::new(Array::from_shape_vec((2, 2),
					  vec![1, 2, 3, 4]).unwrap());
	assert_eq!(*addi_tensor2x2xui8(Rc::clone(&a),
					      Rc::clone(&b)),
		   &*a + &*b);
	assert_eq!(*subi_tensor2x2xui8(Rc::clone(&a),
					      Rc::clone(&b)),
		   &*a - &*b);
	assert_eq!(*muli_tensor2x2xui8(Rc::clone(&a),
					      Rc::clone(&b)),
		   &*a * &*b);
	assert_eq!(*divi_tensor2x2xui8(Rc::clone(&a),
					      Rc::clone(&b)),
		   &*a / &*b);
	assert_eq!(*remi_tensor2x2xui8(Rc::clone(&a),
					      Rc::clone(&b)),
		   &*a % &*b);
    }
    #[rewrite(main)]
    #[test]
    fn tests8() {
	let a:Rc<Array<i8, Dim<[Ix; 2]>>> =
	    Rc::new(Array::from_shape_vec((2, 2),
					  vec![5, 6, 7, 8]).unwrap());
	let b:Rc<Array<i8, Dim<[Ix; 2]>>> =
	    Rc::new(Array::from_shape_vec((2, 2),
					  vec![1, 2, 3, 4]).unwrap());
	assert_eq!(*addi_tensor2x2xsi8(Rc::clone(&a),
					      Rc::clone(&b)),
		   &*a + &*b);
	assert_eq!(*subi_tensor2x2xsi8(Rc::clone(&a),
					      Rc::clone(&b)),
		   &*a - &*b);
	assert_eq!(*muli_tensor2x2xsi8(Rc::clone(&a),
					      Rc::clone(&b)),
		   &*a * &*b);
	assert_eq!(*divi_tensor2x2xsi8(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a / &*b);
	assert_eq!(*remi_tensor2x2xsi8(Rc::clone(&a),
					      Rc::clone(&b)),
		   &*a % &*b);
    }

    #[rewrite(main)]
    #[test]
    fn testu16() {
	let a:Rc<Array<u16, Dim<[Ix; 2]>>> =
	    Rc::new(Array::from_shape_vec((2, 2),
					  vec![5, 6, 7, 8]).unwrap());
	let b:Rc<Array<u16, Dim<[Ix; 2]>>> =
	    Rc::new(Array::from_shape_vec((2, 2),
					  vec![1, 2, 3, 4]).unwrap());
	assert_eq!(*addi_tensor2x2xui16(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a + &*b);
	assert_eq!(*subi_tensor2x2xui16(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a - &*b);
	assert_eq!(*muli_tensor2x2xui16(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a * &*b);
	assert_eq!(*divi_tensor2x2xui16(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a / &*b);
	assert_eq!(*remi_tensor2x2xui16(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a % &*b);
    }
    #[rewrite(main)]
    #[test]
    fn tests16() {
	let a:Rc<Array<i16, Dim<[Ix; 2]>>> =
	    Rc::new(Array::from_shape_vec((2, 2),
					  vec![5, 6, 7, 8]).unwrap());
	let b:Rc<Array<i16, Dim<[Ix; 2]>>> =
	    Rc::new(Array::from_shape_vec((2, 2),
					  vec![1, 2, 3, 4]).unwrap());
	assert_eq!(*addi_tensor2x2xsi16(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a + &*b);
	assert_eq!(*subi_tensor2x2xsi16(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a - &*b);
	assert_eq!(*muli_tensor2x2xsi16(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a * &*b);
	assert_eq!(*divi_tensor2x2xsi16(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a / &*b);
	assert_eq!(*remi_tensor2x2xsi16(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a % &*b);
    }
    #[rewrite(main)]
    #[test]
    fn testu32() {
	let a:Rc<Array<u32, Dim<[Ix; 2]>>> =
	    Rc::new(Array::from_shape_vec((2, 2),
					  vec![5, 6, 7, 8]).unwrap());
	let b:Rc<Array<u32, Dim<[Ix; 2]>>> =
	    Rc::new(Array::from_shape_vec((2, 2),
					  vec![1, 2, 3, 4]).unwrap());
	assert_eq!(*addi_tensor2x2xui32(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a + &*b);
	assert_eq!(*subi_tensor2x2xui32(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a - &*b);
	assert_eq!(*muli_tensor2x2xui32(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a * &*b);
	assert_eq!(*divi_tensor2x2xui32(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a / &*b);
	assert_eq!(*remi_tensor2x2xui32(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a % &*b);
    }
    #[rewrite(main)]
    #[test]
    fn tests32() {
	let a:Rc<Array<i32, Dim<[Ix; 2]>>> =
	    Rc::new(Array::from_shape_vec((2, 2),
					  vec![5, 6, 7, 8]).unwrap());
	let b:Rc<Array<i32, Dim<[Ix; 2]>>> =
	    Rc::new(Array::from_shape_vec((2, 2),
					  vec![1, 2, 3, 4]).unwrap());
	assert_eq!(*addi_tensor2x2xsi32(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a + &*b);
	assert_eq!(*subi_tensor2x2xsi32(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a - &*b);
	assert_eq!(*muli_tensor2x2xsi32(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a * &*b);
	assert_eq!(*divi_tensor2x2xsi32(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a / &*b);
	assert_eq!(*remi_tensor2x2xsi32(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a % &*b);
    }

    #[rewrite(main)]
    #[test]
    fn testu64() {
	let a:Rc<Array<u64, Dim<[Ix; 2]>>> =
	    Rc::new(Array::from_shape_vec((2, 2),
					  vec![5, 6, 7, 8]).unwrap());
	let b:Rc<Array<u64, Dim<[Ix; 2]>>> =
	    Rc::new(Array::from_shape_vec((2, 2),
					  vec![1, 2, 3, 4]).unwrap());
	assert_eq!(*addi_tensor2x2xui64(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a + &*b);
	assert_eq!(*subi_tensor2x2xui64(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a - &*b);
	assert_eq!(*muli_tensor2x2xui64(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a * &*b);
	assert_eq!(*divi_tensor2x2xui64(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a / &*b);
	assert_eq!(*remi_tensor2x2xui64(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a % &*b);
    }
    #[rewrite(main)]
    #[test]
    fn tests64() {
	let a:Rc<Array<i64, Dim<[Ix; 2]>>> =
	    Rc::new(Array::from_shape_vec((2, 2),
					  vec![5, 6, 7, 8]).unwrap());
	let b:Rc<Array<i64, Dim<[Ix; 2]>>> =
	    Rc::new(Array::from_shape_vec((2, 2),
					  vec![1, 2, 3, 4]).unwrap());
	assert_eq!(*addi_tensor2x2xsi64(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a + &*b);
	assert_eq!(*subi_tensor2x2xsi64(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a - &*b);
	assert_eq!(*muli_tensor2x2xsi64(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a * &*b);
	assert_eq!(*divi_tensor2x2xsi64(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a / &*b);
	assert_eq!(*remi_tensor2x2xsi64(Rc::clone(&a),
					       Rc::clone(&b)),
		   &*a % &*b);
    }
}
